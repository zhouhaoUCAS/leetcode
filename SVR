




# -*- coding: utf-8 -*-
"""
Created on Thu Aug  2 15:52:10 2018

@author: zh
"""

from __future__ import division
import time
'''
>>> 3/4
0
>>> from __future__ import division
>>> 3/4
0.75

--------------------------------------------------------------------------------------------

导入精确除法后，若要执行截断除法，可以使用"//"操作符：
--------------------------------------------------------------------------------------------
>>> 3//4
0
'''


import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.svm import SVR
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import learning_curve

rng=np.random.RandomState(0)#用numpy.random.RandomState固定随机种子,但只是起点，下面会继续改变
#就算不停rng.它也会接下来改变，但是重新取0按顺序是不变的
'''
rng.rand(1000,1)
rng.uniform(0,1,(2,3))

 
sorted(rng.rand(1000,1),key=lambda x:x[0])
'''
#np.randm.rand()
X=5*rng.rand(10000,1)#生成一万行一列的0-1之间随机数的numpy.ndarray  5*直接元素级乘进去
y=np.sin(X).ravel()#将数组([[]])变成一维数据（[]),即只能a[]不能a[][]。ravel()其实就是降维函数
#ravel() 和 flatten() 略微不一样
#对每五十个数据添加噪声
y[::50]+=2*(0.5-rng.rand(int(X.shape[0]/50)))

X_plot = np.linspace(0, 5, 100000)[:, None]
#升维操作
#训练数据
train_size=100
#初始化
svr=GridSearchCV(SVR(kernel='rbf',gamma=0.1),cv=5,param_grid={'C':[1e0, 1e1, 1e2, 1e3],"gamma": np.logspace(-2, 2, 5)})
#GridSearchCV可以多个参数寻优{'参数':参数范围，'参数2’：参数范围}

t0=time.time()
#拟合数据训练
svr.fit(X[:train_size], y[:train_size])

svr_fit = time.time() - t0#训练时间

t0=time.time()
#测试
y_svr=svr.predict(X_plot)

svr_predict = time.time() - t0




